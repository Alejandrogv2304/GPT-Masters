CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    Mux(a=dffOut , b=in , sel= load, out=Muxout );
    DFF(in=Muxout , out=dffOut );

}

CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in=in[0] , load=load , out=out[0] );
    Bit(in=in[1] , load=load , out=out[1] );
    Bit(in=in[2] , load=load , out=out[2] );
    Bit(in=in[3] , load=load , out=out[3] );
    Bit(in=in[4] , load=load , out=out[4] );
    Bit(in=in[5] , load=load , out=out[5] );
    Bit(in=in[6] , load=load , out=out[6] );
    Bit(in=in[7] , load=load , out=out[7] );
    Bit(in=in[8] , load=load , out=out[8] );
    Bit(in=in[9] , load=load , out=out[9] );
    Bit(in=in[10] , load=load , out=out[10] );
    Bit(in=in[11] , load=load , out=out[11] );
    Bit(in=in[12] , load=load , out=out[12] );
    Bit(in=in[13] , load=load , out=out[13] );
    Bit(in=in[14] , load=load , out=out[14] );
    Bit(in=in[15] , load=load , out=out[15] );

    
}

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    Mux8Way16(a= r0out, b= r1out, c= r2out, d= r3out, e=r4out , f=r5out , g=r6out , h=r7out , sel=address , out=out );
    DMux8Way(in=load , sel=address , a=p0load, b= p1load, c=p2load , d=p3load , e= p4load, f=p5load , g= p6load, h= p7load);

    Register(in=in, load=p0load, out=r0out);
    Register(in=in, load=p1load, out=r1out);
    Register(in=in, load=p2load, out=r2out);
    Register(in=in, load=p3load, out=r3out);
    Register(in=in, load=p4load, out=r4out);
    Register(in=in, load=p5load, out=r5out);
    Register(in=in, load=p6load, out=r6out);
    Register(in=in, load=p7load, out=r7out);
}

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load , sel=address[0..2] , a=p0load, b= p1load, c=p2load , d=p3load , e= p4load, f=p5load , g= p6load, h= p7load);
   
    RAM8(in=in, load=p0load, address=address[3..5], out=out0);
    RAM8(in=in, load=p1load, address=address[3..5], out=out1);
    RAM8(in=in, load=p2load, address=address[3..5], out=out2);
    RAM8(in=in, load=p3load, address=address[3..5], out=out3);
    RAM8(in=in, load=p4load, address=address[3..5], out=out4);
    RAM8(in=in, load=p5load, address=address[3..5], out=out5);
    RAM8(in=in, load=p6load, address=address[3..5], out=out6);
    RAM8(in=in, load=p7load, address=address[3..5], out=out7);


    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[0..2], out=out);
}

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
 DMux8Way(in=load, sel=address[0..2], a=p0load, b=p1load, c=p2load, d=p3load, e=p4load, f=p5load, g=p6load, h=p7load);

    
    RAM64(in=in, load=p0load, address=address[3..8], out=out0);
    RAM64(in=in, load=p1load, address=address[3..8], out=out1);
    RAM64(in=in, load=p2load, address=address[3..8], out=out2);
    RAM64(in=in, load=p3load, address=address[3..8], out=out3);
    RAM64(in=in, load=p4load, address=address[3..8], out=out4);
    RAM64(in=in, load=p5load, address=address[3..8], out=out5);
    RAM64(in=in, load=p6load, address=address[3..8], out=out6);
    RAM64(in=in, load=p7load, address=address[3..8], out=out7);

    
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[0..2], out=out);
}

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=p0load, b=p1load, c=p2load, d=p3load, e=p4load, f=p5load, g=p6load, h=p7load);

    
    RAM512(in=in, load=p0load, address=address[3..11], out=out0);
    RAM512(in=in, load=p1load, address=address[3..11], out=out1);
    RAM512(in=in, load=p2load, address=address[3..11], out=out2);
    RAM512(in=in, load=p3load, address=address[3..11], out=out3);
    RAM512(in=in, load=p4load, address=address[3..11], out=out4);
    RAM512(in=in, load=p5load, address=address[3..11], out=out5);
    RAM512(in=in, load=p6load, address=address[3..11], out=out6);
    RAM512(in=in, load=p7load, address=address[3..11], out=out7);

    
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[0..2], out=out);
}

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    
    DMux8Way(in=load, sel=address[11..13], a=p0load, b=p1load, c=p2load, d=p3load, e=p4load, f=p5load, g=p6load, h=p7load);

    
    RAM4K(in=in, load=p0load, address=address[0..11], out=out0);
    RAM4K(in=in, load=p1load, address=address[0..11], out=out1);
    RAM4K(in=in, load=p2load, address=address[0..11], out=out2);
    RAM4K(in=in, load=p3load, address=address[0..11], out=out3);
    RAM4K(in=in, load=p4load, address=address[0..11], out=out4);
    RAM4K(in=in, load=p5load, address=address[0..11], out=out5);
    RAM4K(in=in, load=p6load, address=address[0..11], out=out6);
    RAM4K(in=in, load=p7load, address=address[0..11], out=out7);

    
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[11..13], out=out);
}

CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];
    
    PARTS:
    Register(in=resetMux0ut, load=true, out=out, out=reg0ut);
    Inc16(in=reg0ut, out=incOut);
    Mux16(a=loadMux0ut, b[0..15]=false, sel=reset, out=resetMux0ut); 
    Mux16(a=incMux0ut, b=in, sel=load, out=loadMux0ut); 
    Mux16(a=reg0ut, b=incOut, sel=inc, out=incMux0ut); 
}



